<?php


	use Gac\Routing\Exceptions\RouteNotFoundException;
	use Gac\Routing\Routes;
	use PHPUnit\Framework\TestCase;

	class RoutesTest extends TestCase
	{

		/**
		 * @var object|null
		 */
		protected ?object $_object = NULL;

		protected bool $isRouted = false;

		public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $_SERVER['REQUEST_METHOD'] = "GET";
        $this->isRouted = false;
    }

    /**
     * @test
     *
     */
    public function addShouldThrowExceptionOnDuplicatedRoute()
    {
		$this->expectException(Exception::class);
		$this->expectExceptionMessage("The specified path: ( /very/cool/route | GET ) already exists!");
        $router = new Routes();
        $router->add("/very/cool/route", "callback", ["GET"]);
        $router->add("/very/cool/route", "callback", ["GET"]);
    }

    /**
     * @test
     */
    public function routeShouldCallCallbackOnRootPath()
    {
        $url = "/";
        $method = ["GET"];
		$router = new Routes();
		$router->add($url, function () {
		}, $method);

        $router->route();

        $this->assertTrue($this->isRouted, "The route is not working");
    }

    /**
     * @test
     */
    public function routeShouldCallCallbackOnSpecificPath()
    {
        $url = "/my/url";
        $method = ["GET"];

        $router = new Routes();
        $router->add($url, array($this, "onRoute"), $method);

        $_GET['myUri'] = "/my/url";
        $router->route();
        $this->assertTrue($this->isRouted, "The route is not working");
    }

    public function onRoute()
    {
        $this->isRouted = true;
    }
    /**
     * @test
     */
    public function routeShouldThrowAnNotFoundException()
    {
        $this->expectException(RouteNotFoundException::class);

        $router = new Routes();
        $router->route();
    }
}
